{"version":3,"sources":["features/counter/Counter.module.css","features/slide/Slide.tsx","features/counter/counterSlice.ts","features/slide/SlideSlice.ts","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/slide/Slide.module.css"],"names":["module","exports","Slide","props","useState","country","userTempatureValue","tempatureAmount","setTempatureAmount","className","styles","row","value","name","textbox","aria-label","onChange","e","target","button","onClick","stepUpdated","parseInt","counterSlice","createSlice","initialState","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","countriesSlice","values","selected","setSelected","index","amount","isCorrect","delta","getAll","getByAmount","Math","floor","random","length","slice","selectedCountries","countries","App","steps","slide","setSlide","showResult","setShowResult","useSelector","dispatch","useDispatch","useEffect","fetch","then","res","json","catch","finally","slides","map","item","i","key","id","main","temp","setSelectedAsync","results","store","configureStore","reducer","counter","counterReducer","countriesReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,IAAM,qBAAqB,MAAQ,uBAAuB,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,qD,oJCMvJ,SAASC,EAAMC,GAAgE,IAAD,EAErCC,mBAASD,EAAME,QAAQC,oBAFc,mBAE5EC,EAF4E,KAE3DC,EAF2D,KAInF,OACE,6BACE,yBAAKC,UAAWC,IAAOC,KACrB,0BAAMF,UAAWC,IAAOE,OAAQT,EAAME,QAAQQ,OAEhD,yBAAKJ,UAAWC,IAAOC,KACrB,2BACEF,UAAWC,IAAOI,QAClBC,aAAW,kCACXH,MAAOL,EACPS,SAAU,SAAAC,GAAC,OAAIT,EAAmBS,EAAEC,OAAON,UAE7C,4BACEH,UAAWC,IAAOS,OAClBC,QAAS,kBAAMjB,EAAMkB,YAAYC,SAASf,MAF5C,iB,kBCZKgB,EAAeC,YAAY,CACtCX,KAAM,UACNY,aANiC,CACjCb,MAAO,GAMPc,SAAU,CACRC,UAAW,SAAAC,GAKTA,EAAMhB,OAAS,GAEjBiB,UAAW,SAAAD,GACTA,EAAMhB,OAAS,GAGjBkB,kBAAmB,SAACF,EAAOG,GACzBH,EAAMhB,OAASmB,EAAOC,Y,EAK+BT,EAAaU,QAiBzDV,G,EAjBAI,U,EAAWE,U,EAAWC,kBAiBtBP,EAAf,S,gCCpCaW,G,MAAiBV,YAAY,CACxCX,KAAM,YACNY,aAPmC,CACnCU,OAAQ,GACRC,SAAU,IAMVV,SAAU,CACRW,YAAa,SAACT,EAAOG,GACnBH,EAAMQ,SAASL,EAAOC,QAAQM,OAAOhC,mBAAqByB,EAAOC,QAAQO,OACzEX,EAAMQ,SAASL,EAAOC,QAAQM,OAAOE,UAAYT,EAAOC,QAAQS,MAAQ,GAAKV,EAAOC,QAAQS,OAAS,GAGvGC,OAAQ,SAACd,EAAOG,GAEdH,EAAMO,OAASJ,EAAOC,SAExBW,YAAa,SAACf,EAAOG,GACnB,IAAMO,EAAQM,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMjB,EAAMO,OAAOY,OAAShB,EAAOC,UACjFJ,EAAMQ,SAAWR,EAAMO,OAAOa,MAAMV,EAAOA,EAAQP,EAAOC,c,EAKZE,EAAeD,QAApDU,E,EAAAA,YAAaN,E,EAAAA,YAAaK,E,EAAAA,OAgC5BO,EAAoB,SAACrB,GAAD,OAAsBA,EAAMsB,UAAUd,UAExDF,IAAf,QCLeiB,MAlDf,WAAgB,IAAD,EACa/C,mBAAS,GADtB,mBACNgD,EADM,aAEahD,mBAAS,IAFtB,mBAENiD,EAFM,KAECC,EAFD,OAGuBlD,oBAAS,GAHhC,mBAGNmD,EAHM,KAGMC,EAHN,KAKPN,EAAYO,YAAYR,GACxBS,EAAWC,cAEjBC,qBAAU,WDmBoB,IAACrB,EClB7BmB,GDkB6BnB,EClBHa,EDkBgC,SAAAM,GAC5DG,MAAM,mBAAmBC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAAQC,OAAM,SAAChD,GACxD,MAAO,MACN6C,MAAK,SAACC,GACPL,EAAShB,EAAOqB,OACfG,SAAQ,WACTR,EAASf,EAAYJ,YCvBpBW,GAEH,IAQMiB,EAASjB,EAAUkB,KAAI,SAACC,EAAWC,GAAZ,OAC1B,yBAAKC,IAAKD,GACT,kBAACpE,EAAD,CAAOmB,YAAa,SAACkB,GAEnBmB,EDawB,SAACpB,EAAe+B,EAAW9B,GAA3B,OAAwD,SAAAmB,GAEtFG,MAAM,qDAAD,OAAsDQ,EAAKG,GAA3D,yDACFV,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBC,OAAM,SAAAhD,OAEJ6C,MAAK,SAAAC,GACN,IAAMtB,EAAQF,EAASwB,EAAIU,KAAKC,KAChChB,EAASrB,EAAY,CAAEC,QAAO+B,OAAM9B,SAAQE,eCrBjCkC,CAAiBL,EAAGD,EAAM9B,IAXnCc,EAAQ,GAAKH,EAAUH,OAI3BO,EAASD,EAAQ,GAHfG,GAAc,IAYXnD,QAASgE,QAEVO,EAAU1B,EAAUkB,KAAI,SAACC,EAAWC,GAAZ,OAC3B,yBAAKC,IAAKF,EAAKG,IACd,4BAAKH,EAAKxD,MACTwD,EAAK7B,UAAY,mBAAjB,qBAGL,OAAwB,GAApBU,EAAUH,OACJ,wDAKPQ,EAMC,6BAAMqB,GALN,kBAAC,IAAD,CACExC,SAAUiB,GAETc,ICpDIU,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,EACT/B,UAAWgC,KCKKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUb,MAAOA,GACf,kBAAC,EAAD,QAGJc,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAiC,GACLC,QAAQD,MAAMA,EAAME,a,kBE7I5BpG,EAAOC,QAAU,CAAC,IAAM,mBAAmB,MAAQ,qBAAqB,OAAS,sBAAsB,QAAU,uBAAuB,YAAc,kD","file":"static/js/main.76928838.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__2SIMW\",\"value\":\"Counter_value__3MoFS\",\"button\":\"Counter_button__D9d0n\",\"textbox\":\"Counter_textbox__32vyy\",\"asyncButton\":\"Counter_asyncButton__1erfT Counter_button__D9d0n\"};","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  getByAmount, getByAmountAsync, selectedCountries,\r\n} from './SlideSlice';\r\nimport styles from './Slide.module.css';\r\n\r\nexport function Slide(props: { stepUpdated: (amount: number) => any, country: any }) {\r\n\r\n  const [tempatureAmount, setTempatureAmount] = useState(props.country.userTempatureValue);\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.row}>\r\n        <span className={styles.value}>{props.country.name}</span>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <input\r\n          className={styles.textbox}\r\n          aria-label=\"Set your bet tempature in state\"\r\n          value={tempatureAmount}\r\n          onChange={e => setTempatureAmount(e.target.value)}\r\n        />\r\n        <button\r\n          className={styles.button}\r\n          onClick={() => props.stepUpdated(parseInt(tempatureAmount))}>\r\n          Bet Weather\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CountriesState {\r\n  values: Array<any>;\r\n  selected: Array<any>;\r\n}\r\n\r\nconst initialState: CountriesState = {\r\n  values: [],\r\n  selected: []\r\n};\r\n\r\nexport const countriesSlice = createSlice({\r\n  name: 'countries',\r\n  initialState,\r\n  reducers: {\r\n    setSelected: (state, action: PayloadAction<{ index: number, item: any, amount: number, delta: number }>) => {\r\n      state.selected[action.payload.index].userTempatureValue = action.payload.amount;\r\n      state.selected[action.payload.index].isCorrect = action.payload.delta < 5 || action.payload.delta > -5;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    getAll: (state, action: PayloadAction<Array<any>>) => {\r\n\r\n      state.values = action.payload;\r\n    },\r\n    getByAmount: (state, action: PayloadAction<number>) => {\r\n      const index = Math.floor(Math.random() * Math.floor(state.values.length - action.payload));\r\n      state.selected = state.values.slice(index, index + action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { getByAmount, setSelected, getAll } = countriesSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const getByAmountAsync = (amount: number): AppThunk => dispatch => {\r\n  fetch('/city.list.json').then((res) => res.json()).catch((e) => {\r\n    return [];\r\n  }).then((res) => {\r\n    dispatch(getAll(res));\r\n  }).finally(() => {\r\n    dispatch(getByAmount(amount));\r\n  });\r\n};\r\n\r\nexport const setSelectedAsync = (index: number, item: any, amount: number): AppThunk => dispatch => {\r\n\r\n  fetch(`http://api.openweathermap.org/data/2.5/weather?id=${item.id}&appid=9cff733aee57cb05b63dd4f731c46bc4&units=metric`)\r\n    .then(res => res.json())\r\n    .catch(e => {\r\n      debugger\r\n    }).then(res => {\r\n      const delta = amount - res.main.temp;\r\n      dispatch(setSelected({ index, item, amount, delta }));\r\n    });\r\n\r\n}\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectedCountries = (state: RootState) => state.countries.selected;\r\n\r\nexport default countriesSlice.reducer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport logo from './logo.svg';\r\nimport { Slide, Counter } from './features/index';\r\nimport './App.css';\r\nimport { Step } from './models/Step';\r\nimport AwesomeSlider from 'react-awesome-slider';\r\nimport 'react-awesome-slider/dist/styles.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  getByAmount, setSelected, getByAmountAsync, selectedCountries, setSelectedAsync,\r\n} from './features/slide/SlideSlice';\r\n\r\nfunction App() {\r\n  const [steps, setSteps] = useState(5);\r\n  const [slide, setSlide] = useState(0);\r\n  const [showResult, setShowResult] = useState(false);\r\n\r\n  const countries = useSelector(selectedCountries);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getByAmountAsync(steps))\r\n  }, countries);\r\n\r\n  const next = () => {\r\n    if (slide + 1 == countries.length) {\r\n      setShowResult(true);\r\n      return;\r\n    }\r\n    setSlide(slide + 1);\r\n  }\r\n\r\n  const slides = countries.map((item: any, i) =>\r\n    (<div key={i}>\r\n      <Slide stepUpdated={(amount) => {\r\n\r\n        dispatch(setSelectedAsync(i, item, amount));\r\n        next();\r\n      }} country={item} />\r\n    </div>));\r\n  const results = countries.map((item: any, i) =>\r\n    (<div key={item.id}>\r\n      <h1>{item.name}</h1>\r\n      {item.isCorrect ? 'you got this one' : `wrong answer :`}\r\n    </div>));\r\n\r\n  if (countries.length == 0) {\r\n    return (<div>Still loading countries</div>)\r\n  }\r\n\r\n\r\n  return (\r\n    !showResult ?\r\n      <AwesomeSlider\r\n        selected={slide}\r\n      >\r\n        {slides}\r\n      </AwesomeSlider> :\r\n      <div>{results}</div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport countriesReducer from '../features/slide/SlideSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    countries: countriesReducer\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Slide_row__3hGpd\",\"value\":\"Slide_value__3qFdV\",\"button\":\"Slide_button__5zewQ\",\"textbox\":\"Slide_textbox__25ahk\",\"asyncButton\":\"Slide_asyncButton__1o0k4 Slide_button__5zewQ\"};"],"sourceRoot":""}